<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>웹앱 on Soon&#39;s Blog</title>
        <link>https://meme2515.github.io/tags/%EC%9B%B9%EC%95%B1/</link>
        <description>Recent content in 웹앱 on Soon&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 27 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://meme2515.github.io/tags/%EC%9B%B9%EC%95%B1/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>개인 프로젝트 - 모기 활동 지수 예측기</title>
        <link>https://meme2515.github.io/projects/mosquito/</link>
        <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://meme2515.github.io/projects/mosquito/</guid>
        <description>&lt;img src="https://meme2515.github.io/projects/images/mosquito_title.jpeg" alt="Featured image of post 개인 프로젝트 - 모기 활동 지수 예측기" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/projects/images/mosquito_1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 1. 어플리케이션 화면 예시&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/meme2515/mosquito_app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 화면과 같이 관심 지역을 읍면동 단위까지 선택하면 조회 당일의 모기 활동 지수를 예측하는 웹 어플리케이션 입니다.&lt;/p&gt;
&lt;p&gt;구축된 ML 모델을 노트북 환경이 아닌 실제 어플리케이션에 적용하려면 어떤 작업이 필요할까에 대한 궁금증으로 개인적으로 진행한 프로젝트이며, 프로젝트 진행 내용은 대략적으로 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;오픈 데이터셋을 활용한 사이킷런 회귀 모델 구축&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flask 어플리케이션과 모델 연동 및 기본적인 html 페이지 구축&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기상청 단기 예보 API 를 활용한 날씨 데이터 조회 기능 구현&lt;/li&gt;
&lt;li&gt;지역 별 경위도와 기상청 API 좌표 체계 간 변환 함수 구현&lt;/li&gt;
&lt;li&gt;기본적인 JavaScript 를 활용해 지역 선택 기능 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WSGI, NGINX 를 활용한 배포 서버 구축&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;도커를 활용한 프로젝트 컨테이너 생성&lt;/li&gt;
&lt;li&gt;Digital Ocean 클라우드 서버 배포&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;모기-활동-지수&#34;&gt;모기 활동 지수?&lt;/h2&gt;
&lt;p&gt;모기 활동 지수라는 개념이 생소하실텐데요, 기상청에서 운영 중인 모기 활동 예측 기술을 먼저 소개 드립니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://news.seoul.go.kr/welfare/archives/511985&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;홍보 자료&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://koreascience.kr/article/JAKO201867551547852.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;방재저널&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://patentimages.storage.googleapis.com/c0/15/61/0ea5a1509636d0/KR20180060730A.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;특허청 자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/projects/images/mosquito_4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 1. 데이터 수집 경로&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;일반적인 인식과는 다르게 우리나라 또한 모기와 관련된 질병으로 부터 안전지역이라 할 수 없는데, 90년대 이후 북한 접경 지역에선 말라리아 환자가 지속적으로 발생하고 있고 인천국제공항 주변 지역 또한 해외여행객의 영향으로 지키바이러스, 뎅기열 등 매개감염병을 유발하는 많은 외래종 모기가 유입된 상황입니다.&lt;/p&gt;
&lt;p&gt;이에 대해 수도권 기상청은 국민 건강 보호를 목적으로 2018년 모기 예측 기술 개발 사업을 추진했습니다. 수도권, 특히 인천광역시에 많이 분포한 수백 개 모기 관측망의 데이터를 기온, 토지이용 상황 등과 함께 분석해 랜덤 포레스트 모델을 구축했는데요. 주요 인사이트는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개채 수 증가는 7월 초, 9월 중순 2번의 정점을 이루는데, 이는 여름철 집중호우의 영향으로 추정.&lt;/li&gt;
&lt;li&gt;일최저기온이 10도를 넘으면 모기개채수는 증가하기 시작함.&lt;/li&gt;
&lt;li&gt;10월 최저기온이 급격히 낮아지면 모기개채수도 급감함.&lt;/li&gt;
&lt;li&gt;도심과 농촌, 해안 간 우세하게 나타나는 모기의 종류에서 많은 차이를 보임.&lt;/li&gt;
&lt;li&gt;서울시의 경우 기온이 1도 상승하면 모기 발생 위험이 약 10.8% 씩 증가.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/projects/images/mosquito_5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 2. 빨간집모기 개체 수와 기온의 시계열 분포&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;회귀-모델&#34;&gt;회귀 모델&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://news.seoul.go.kr/welfare/mosquito&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;데이터 소스 - 서울시&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로젝트의 중점이 모델 서빙이기 때문에, 특별한 feature engineering 이나 model selection 과정 없이 간단한 회귀 모델로 모기 출현 지수를 예측하는 모델을 구축했습니다&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(사실 활용한 데이터셋 자체가 서울시가 제공한 예측치의 시계열 자료이기에, 적당히만 세팅한다면 100% 에 가까운 정확도가 나올 것으로 생각됩니다)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;우선 데이터셋은 1,342 건의 일 별 (1) 모기 지수, (2) 강수량, (3) 최저 기온, (4) 최대 기온으로 구성되어 있습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;mosquito_Indicator&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;rain(mm)&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;min_T(℃)&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;max_T(℃)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;count&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1342.000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1342.000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1342.000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1342.000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;mean&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;251.991803&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;3.539866&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;10.005663&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;19.096870&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;std&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;295.871336&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;13.868106&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;11.109489&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;11.063394&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;min&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;-17.800000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;-10.700000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;max&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1000.000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;144.500000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;30.300000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;39.600000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;여기서 mosquito_indicator 로 표기된 모기 활동 지수는 특정한 범위 내에서 채집된 모기 개채수를 정규화시킨 지표라고 이해하시면 됩니다.&lt;/p&gt;
&lt;p&gt;원본 데이터에는 이외에도 관측 날짜가 포함되어 있습니다. 이는 타깃 변수가 계절성을 가지기 때문에 핵심 feature 로 활용될 수 있지만, 모델링 과정을 최대한 간단하게 유지하기 위해 아래 내용에선 생략되었습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/projects/images/mosquito_8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 3. 변수 별 Pair Plot&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;변수 별 관계를 시각적으로 살펴봤을때, 최저/최고 기온이 모기 개채수와 전반적으로 큰 상관성을 나타내는 것을 확인할 수 있습니다. 강수량의 경우 이상치로 인해 관계성을 시각적으로 판단하기가 어려웠고, 따라서 아래와 같이 강수량의 로그 값과 모기 활동 지수 간의 관계를 월 별로 시각화 하였습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/projects/images/mosquito_9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 4. 월 별 로그 강수량과 모기 활동 지수&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;생각과 달리 10월을 제외하면 모기 개채수와 강수량 간에는 큰 상관성이 관찰되지는 않았습니다. 저널에 기재된 것과 같이 7월 초, 9월 말 집중 호우로 개채수가 급감된다는 가설과 다소 상반되는 결과였는데, 하지만 월 별 모기 활동 지수의 분포에 차이가 있다는 점을 확인할 수 있었어요.&lt;/p&gt;
&lt;p&gt;모델링은 사이킷런의 회귀 모델을 기반으로 진행했으며, Validation Set 에 대해 약 155 의 Mean Absolute Error 를 기록했습니다.&lt;/p&gt;
&lt;h2 id=&#34;flask-어플리케이션&#34;&gt;Flask 어플리케이션&lt;/h2&gt;
&lt;p&gt;학습이 완료된 모델은 별도 pkl 파일로 저장하여, flask 앱에서 바로 활용할 수 있도록 구성했습니다. 이후 유저의 위치 정보를 기상 정보로 변환하려고 보니 다음과 같은 데이터 변환 과정이 필요했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;읍면동 까지의 위치 정보를 경위도 좌표로 변환&lt;/li&gt;
&lt;li&gt;변환된 경위도 좌표를 기상청 격자정보로 변환&lt;/li&gt;
&lt;li&gt;격자정보를 통해 기상청 API 에서 강수량, 기온 정보 가져오기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;읍면동 위치에 따른 경위도 정보는 국내 모든 행정구역에 대한 데이터를 &lt;a class=&#34;link&#34; href=&#34;https://skyseven73.tistory.com/23&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;해당 블로그&lt;/a&gt; 에서 다운받아 사용했습니다. csv 형태로 서버에 저장 후, 필요시 pandas 데이터프레임으로 불러와 해당되는 경위도를 변수에 저장하게 되는데 추후 성능 개선을 위해선 데이터베이스 활용 또한 고려가 가능합니다.&lt;/p&gt;
&lt;p&gt;기상청 API 에서 필요로 하는 위치 정보는 경위도가 아닌 별도의 &lt;a class=&#34;link&#34; href=&#34;https://fronteer.kr/service/kmaxy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;격자정보&lt;/a&gt;이기 때문에 별도의 변환 로직을 구현하는 과정 또한 필요했습니다. 로직은 &lt;a class=&#34;link&#34; href=&#34;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=javaking75&amp;amp;logNo=220089575454&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;해당 블로그&lt;/a&gt; 를 참고했습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/projects/images/mosquito_7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 4. 기상청 격자정보 - 위경도 변환 예시&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이렇게 추출된 기상청 격자정보 등의 값을 기반으로 &lt;a class=&#34;link&#34; href=&#34;https://www.data.go.kr/data/15043494/fileData.do&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;기상청 단기예보 API&lt;/a&gt; 에서 최신 기상 정보를 가져오는 파이프라인을 구축했습니다. 예측하고자 하는 날짜의 바로 전날 오후 11시에 발표된 예보값을 가져오게 되며, API 코드는 위 링크에 첨부되어 있는 API 가이드를 참고했습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/projects/images/mosquito_6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 5. 기상청 단기 예보 API 출력값 예시&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;프론트엔드 구성 단계에선 브라우저 내에서 읍면동 단위 까지의 위치 정보를 기입할 수 있도록 구성하는 작업이 필요했는데, html 페이지 내에서 선택된 &amp;ldquo;시도&amp;rdquo; 값에 따라 &amp;ldquo;시군구&amp;rdquo; 의 선택값 등을 변동하는 과정에서 약간의 jQuery를 활용했습니다 (&lt;a class=&#34;link&#34; href=&#34;https://chichi-story.tistory.com/18&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;참고 블로그&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;wsgi--nginx--도커&#34;&gt;WSGI + NGINX + 도커&lt;/h2&gt;
&lt;p&gt;가능한 배포 환경에 가까운 경험을 위해서 flask 앱을 WSGI 서버인 gunicorn 으로 래핑 후, gunicorn 을 구동하는 3개의 도커 컨테이너를 대상으로 로드 밸런싱을 수행하는 nginx 서버를 구축했습니다. 관련해 공부한 내용은 &lt;a class=&#34;link&#34; href=&#34;http://meme2515.github.io/computer_science/wsgi/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;웹서버와 WAS&lt;/a&gt; 에 자세히 기록해 두었습니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>웹 어플리케이션 배포 - WSGI 와 NGINX 서버란</title>
        <link>https://meme2515.github.io/computer_science/wsgi/</link>
        <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://meme2515.github.io/computer_science/wsgi/</guid>
        <description>&lt;img src="https://meme2515.github.io/computer_science/images/wsgi_1.png" alt="Featured image of post 웹 어플리케이션 배포 - WSGI 와 NGINX 서버란" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;이번 글에서는 웹 개발에서 자주 등장하는 단어인 wsgi, nginx, werkzeug 등을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;web-server-vs-was&#34;&gt;Web Server vs. WAS&lt;/h2&gt;
&lt;p&gt;먼저 Web Server 와 Web Application Server (WAS) 의 개념을 살펴볼 필요가 있다.&lt;/p&gt;
&lt;p&gt;현대적인 웹페이지엔 &lt;strong&gt;정적 요소&lt;/strong&gt; (Static Pages - image, html, css, javascript) 와 &lt;strong&gt;동적 요소&lt;/strong&gt; (Dynamic Pages - python, database) 가 혼재되어 있다. 보통 이러한 정적인 요소를 클라이언트 사이드에서 처리되는 프론트엔드, 동적인 요소를 서버 사이드에서 처리되는 백엔드로 지칭한다.&lt;/p&gt;
&lt;p&gt;하지만 클라이언트 사이드에서 처리되는 html, css 또한 결국 웹 서버에서 관련된 파일을 내려받는 과정이 필요한데, 이러한 정적인 요소를 담당하는 서버를 &lt;strong&gt;Web Server&lt;/strong&gt;, 그리고 동적인 요소를 담당하는 서버를 &lt;strong&gt;WAS&lt;/strong&gt; 로 설정하는 것이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/computer_science/images/wsgi_6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 1. 웹서버와 WAS 의 구성&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;WSGI 는 이와 같은 구조에서 동적인 요소를 담당하는 WAS 를 구축하는데 활용된다. 반면 NGINX 는 Web Server 의 한 종류로서, 웹사이트의 정적인 요소를 담당하고 필요 시 WSGI 서버와 통신하여 동적인 결과값을 클라이언트에서 서빙하는 역할 또한 수행하는 것.&lt;/p&gt;
&lt;h2 id=&#34;wsgi&#34;&gt;WSGI&lt;/h2&gt;
&lt;p&gt;로컬 환경에서 서버를 구동해본 경험이 있다면 다음과 같은 메시지에 익숙할 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WARNING: This is a development server. Do not use it in a production deployment.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Use a production WSGI server instead
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Restarting with stat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Debugger is active!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Debugger PIN: 123-456-789
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Running on http://127.0.0.1:5000/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;이와 같은 메시지가 뜨는 이유는, Flask 나 Django 같은 백엔드 프레임워크에서 기본적으로 구동되는 서버는 실제 배포를 염두하고 제작된 서버 구조가 아니기 때문이다. 이와 같은 서버는 Werkzeug (벨저크) 패키지에서 제공하는 개발 서버인데, HTTP 기능이 제한되어 있고, 효율성, 안정성, 보안성에서 많은 취약점이 존재한다 &lt;em&gt;(하지만 속도가 빠르고, 개발에 용이한 기능들을 제공)&lt;/em&gt;. 따라서 배포 환경에 알맞은 WSGI HTTP 서버를 활용할 필요가 발생한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/computer_science/images/wsgi_5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 2. WSGI 서버 활용 예시&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;WSGI (Web Server Gateway Interface) 란 유저로 부터 전송받은 HTTP Request 를 Django 와 같은 백엔드 프레임워크가 이해할 수 있는 Python 오브젝트로 변환하는 역할을 수행한다. 앞서 언급한 벨저크 서버 또한 사실 이러한 기능을 수행하고 있지만, 개발 환경에 맞는 WSGI 서버란 다수의 워커를 구성해 분산 처리가 가능하고, 개발 서버의 취약점을 보완한 버전이라고 생각할 수 있다.&lt;/p&gt;
&lt;p&gt;프레임워크와 WSGI 서버를 구분하는 또 다른 장점은 백엔드 프레임워크가 클라이언트 연결을 유지하는 작업을 수행할 필요 없이, 주어진 Request 에 대한 Response 값을 반환하는 작업에만 집중할 수 있다는 점이다. Django 와 같은 백엔드 프레임워크는 애초에 이러한 목적으로 설계된 패키지이기 때문에, 가능한 모든 상황에서 WSGI 래퍼를 활용해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;wsgi-standard&#34;&gt;WSGI Standard&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/computer_science/images/wsgi_4.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 3. Gunicorn 로고&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;WSGI 스탠다드란 모든 WSGI 서버와 프레임워크가 서로 호환할 수 있도록 약속된 통신 프로토콜이다. 대표적인 WSGI 서버인 Gunicorn, uWSGI 등은 이러한 스탠다드를 따르기 때문에 WSGI 프레임워크인 Django, Flask, Pyramid, Falcon 등과 모두 호환이 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;nginx&#34;&gt;NGINX&lt;/h2&gt;
&lt;p&gt;언급했듯 NGINX 는 웹사이트의 정적인 요소를 담당하는 Web Server 이다. 클라이언트가 웹서버에 html, css 등의 파일을 요청하면, 이를 빠르게 서빙하여 WAS 가 동작할 필요가 없게끔 만들어준다.&lt;/p&gt;
&lt;h3 id=&#34;reverse-proxy&#34;&gt;Reverse Proxy&lt;/h3&gt;
&lt;p&gt;NGINX 와 WSGI 서버는 Reverse Proxy 방식을 통해 연결된다. 여기서 Reverse Proxy 란 사용자가 흔히 활용하는 Proxy 서버와 반대되는 개념인데, 클라이언트가 서버로 보내는 HTTP 정보가 우회될때 이를 &lt;strong&gt;Forward Proxy&lt;/strong&gt;, 서버가 클라이언트에게 보내는 HTTP 정보가 우회될때 이를 &lt;strong&gt;Reverse Proxy&lt;/strong&gt; 라고 구분지어 부르는 것.&lt;/p&gt;
&lt;h3 id=&#34;web-server-가-반드시-구분되어야-할까&#34;&gt;Web Server 가 반드시 구분되어야 할까?&lt;/h3&gt;
&lt;p&gt;결론만 놓고 보면 Django, WSGI 서버만 있어도 웹사이트는 정상적으로 작동한다. 현대적인 WSGI 서버는 정적인 요소까지 모두 서빙하는 기능을 제공하기 때문이다.&lt;/p&gt;
&lt;p&gt;하지만 대부분의 경우 별도 웹서버를 구축하는 것이 권장되는 가장 큰 이유는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버 부하 방지
&lt;ul&gt;
&lt;li&gt;WAS 는 데이터베이스 조회와 다양한 연산 처리로 이미 많은 연산 자원을 활용하는 상태이다. 때문에 단순한 정적 컨텐츠는 Web Server 에서 빠르게 전달하는 것이 유저의 체감 속도도 높이고, 서버 부하 또한 줄일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;여러 대의 WAS 를 활용한 로드 밸런싱
&lt;ul&gt;
&lt;li&gt;많은 트래픽이 발생할 경우 WAS 의 수를 늘려, 이를 하나의 Web Server 와 연동하는 것이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://meme2515.github.io/computer_science/images/wsgi_3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fig 4. NGINX 서버 활용 예시&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;정리하자면 Django, Flask 등의 백엔드 서버 배포 시 동적인 요소와 정적인 요소를 구분하기 위해 NGINX 서버를 구축하고, NGINX 서버와 Django 에서 개발된 백엔드와의 소통을 위해 WSGI 서버가 구축된다. 경우에 따라 일부 요소들이 생략되는 경우가 발생할 수 있지만 &lt;em&gt;(Jekyll, Hugo 와 같은 Static Site 는 구조상 백엔드를 필요로하지 않는다. 또한 트래픽이 작다면 웹서버 없이 프로토타이핑이 가능하다)&lt;/em&gt;, 일반적인 형태의 웹사이트는 보통 이러한 구조를 따라 구축되는 것이 강하게 권장된다고 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wayhome25.github.io/django/2018/03/03/django-deploy-02-nginx-wsgi/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wayhome25.github.io/django/2018/03/03/django-deploy-02-nginx-wsgi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=66xlIunxWYQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=66xlIunxWYQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://binux.tistory.com/32&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://binux.tistory.com/32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
